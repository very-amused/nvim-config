# New HTTP route w/ ctx
snippet cwr
	func ${1}(ctx context.Context, w http.ResponseWriter, r *http.Request) {
		//user := rctx.GetUser(ctx)
		// TODO
	}

# Configure messagepack codegen
snippet msgp
	//go:generate msgp
	//msgp:tag json

# Encode response body
snippet @encode
	core.Encode(w, ${1}, w.Header().Get("Content-Type"))
# Decode request body
snippet @decode
	core.Decode(r.Body, ${1}, r.Header.Get("Content-Type"))

# Write HTTPerror to w
snippet @werr
	core.WriteError(w, ${1})
	return
# Write ServerErrorFrom(err) to w
snippet @e500
	core.WriteError500(w, err)
	return
# @e500 if err != nil
snippet @enil
	if err != nil {
		core.WriteError500(w, err)
		return
	}

# Open SQL transaction
snippet @tx
	tx, err := core.DB.Begin()
	if err != nil {
		core.WriteError500(w, err)
		return
	}
	defer tx.Rollback()
# Open Redlock mutex
snippet @redlock
	lock := core.Redlock.NewMutex(fmt.Sprintf("NightCrypt:$1:ID:%d", $2))
	if err = lock.Lock(); err != nil {
		core.WriteError500(w, err)
		return
	}
	defer lock.Unlock()


# Append encryption fields to query
snippet @encryption
	query.Append("DataHeader", &${1}.Encryption.Header.DataHeader)
	query.Append("WrappingAlgo", &${1}.Encryption.Header.WrappingAlgo)
	query.Append("CryptoKey", &${1}.Encryption.Key)

# Log error in tests
snippet @logerr
	if err != nil {
		logErr(t, r, err)
	}
